(ns boxes.core
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]))





;; Model

(defn point [x y] {:x x :y y})

(defn p+ [p1 p2] {:x (+ (:x p1) (:x p2))
                  :y (+ (:y p1) (:y p2))})

(defn p+s [{:keys [x y]} s] (point (+ x s) (+ y s)))

(defn p- [p1 p2] {:x (- (:x p1) (:x p2))
                  :y (- (:y p2) (:y p2))})

(defn p-s [{:keys [x y]} s] (point (- x s) (- y s)))


(defn p* [p1 p2] {:x (* (:x p1) (:x p2))
                  :y (* (:y p1) (:y p2))
                  })

(defn p*s [{:keys [x y]} s] (point (* x s) (* y s)))

(defn p-div [p1 p2] {:x (/ (:x p1) (:x p2))
                  :y (/ (:y p1) (:y p2))} )

(defn p-div-s [{:keys [x y]} s] (point (/ x s) (/ y s)))

(defn create-box [id upper-left size color]
  {:id id :upper-left upper-left :size size :color color})

(defn move-box [d-pos box]
  (update box :upper-left (p+ d-pos (:upper-left box))))

(defn resize-box [factor anchor box]
  (let [rel-anchor (p-div-s (p- anchor (:upper-left box)) (:size box) )
        resized-box (update box :size (p*s (:size box) factor))
        rel-anchor-resized (p-div-s (p- anchor (:upper-left box)) (:size resized-box) )
        d-pos (p*s (p- rel-anchor-resized rel-anchor) (:size resized-box))
        ]))



;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

(path-for :about)
;; -------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to boxes"]
     [:ul
      [:li [:a {:href (path-for :items)} "Items of boxes"]]
      [:li [:a {:href "/borken/link"} "Borken link"]]]]))



(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of boxes"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))


(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of boxes")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About boxes"]]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About boxes"]]]
       [page]
       [:footer
        [:p "boxes was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (reagent/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)
        ))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
